/* translation of file(s)
	"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
	"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f2.k"
	"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f1.k"
 */
/* generated by:
 *  @(#)$Author: criswell $
 */
#define KC_REWRITE

#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>
#include "testk.h"
#include "testrk.h"


namespace kc {
base_rview_class base_rview;
canon_class canon;
calculate_class calculate;

impl_rviews rviews[] = {
    {"base_rview",&base_rview},
    {"canon",&canon},
    {"calculate",&calculate},
    {0,0}
};

} // namespace kc
namespace kc { }
using namespace kc;
/* included stuff */
#line 99 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
inline integer plus(integer a, integer b) { return mkinteger(a->value+b->value); }
inline integer minus(integer a, integer b) { return mkinteger(a->value-b->value); }
inline integer mul(integer a, integer b) { return mkinteger(a->value*b->value); }
inline integer divi(integer a, integer b) { return mkinteger(b->value==0 ? 0 : a->value / b->value); }

#line  41 "testrk.kcc"
/* end included stuff */


namespace kc {

#ifndef KC_TRACE_PROVIDED
#define KC_TRACE_PROVIDED(COND,FILE,LINE,NODE) COND
#endif
#ifndef KC_TRACE_REWRITE_MATCH
#define KC_TRACE_REWRITE_MATCH(VIEW,FILE,LINE,NODE)
#endif
#ifndef KC_TRACE_REWRITE_RESULT
#define KC_TRACE_REWRITE_RESULT(VIEW,FILE,LINE,NODE)
#endif

line impl_line_Line::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_line_Line* kc_result= Line(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

term impl_term_Ident::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_term_Ident* kc_result= Ident(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

term impl_term_Number::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_term_Number* kc_result= Number(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Div2::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_casestring_1 == casestring_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Div2* kc_result= Div2(l_expression_1, l_casestring_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Div::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    switch(kc_current_view_base) {
	case calculate_enum: {
	    calculate_class& kc_current_view=static_cast<calculate_class&>(kc_current_view_base);
#line 92 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
	    if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Div) && (phylum_cast<const impl_expression_Div*>(l_expression_2)->expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Div*>(l_expression_2)->expression_1)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 92, this);
#line 91 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 91 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Div*>(l_expression_2)->expression_1)->term_1)->integer_1;
#line 91 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression rest = phylum_cast<const impl_expression_Div*>(l_expression_2)->expression_2;
#line 92 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Mul(Term(Number(divi(a, b))), rest);

#line  133 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",92,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 95 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Mul) && (phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_1)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 95, this);
#line 94 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 94 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_1)->term_1)->integer_1;
#line 94 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression rest = phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_2;
#line 95 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Div(Term(Number(divi(a, b))), rest);

#line  149 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",95,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 89 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_2)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 89, this);
#line 88 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 88 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_2)->term_1)->integer_1;
#line 89 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Term(Number(divi(a, b)));

#line  163 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",89,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
		    goto kc_rewrite_default;
	}
	kc_rewrite_default:
	default:;
    }
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Div* kc_result= Div(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Minus::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    switch(kc_current_view_base) {
	case calculate_enum: {
	    calculate_class& kc_current_view=static_cast<calculate_class&>(kc_current_view_base);
#line 74 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
	    if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Minus) && (phylum_cast<const impl_expression_Minus*>(l_expression_2)->expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Minus*>(l_expression_2)->expression_1)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 74, this);
#line 73 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 73 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Minus*>(l_expression_2)->expression_1)->term_1)->integer_1;
#line 73 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression rest = phylum_cast<const impl_expression_Minus*>(l_expression_2)->expression_2;
#line 74 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Plus(Term(Number(minus(a, b))), rest);

#line  202 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",74,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 77 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Plus) && (phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_1)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 77, this);
#line 76 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 76 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_1)->term_1)->integer_1;
#line 76 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression rest = phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_2;
#line 77 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Minus(Term(Number(minus(a, b))), rest);

#line  218 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",77,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 71 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_2)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 71, this);
#line 70 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 70 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_2)->term_1)->integer_1;
#line 71 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Term(Number(minus(a, b)));

#line  232 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",71,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
		    goto kc_rewrite_default;
	}
	case canon_enum: {
	    canon_class& kc_current_view=static_cast<canon_class&>(kc_current_view_base);
#line 115 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
	    if ((l_expression_1->prod_sel() == sel_Plus)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 115, this);
#line 114 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression a = phylum_cast<const impl_expression_Plus*>(l_expression_1)->expression_1;
#line 114 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression b = phylum_cast<const impl_expression_Plus*>(l_expression_1)->expression_2;
#line 114 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression c = l_expression_2;
#line 115 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Plus(a, Minus(b, c));

#line  252 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",115,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
		    goto kc_rewrite_default;
	}
	kc_rewrite_default:
	default:;
    }
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Minus* kc_result= Minus(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Mul::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    switch(kc_current_view_base) {
	case calculate_enum: {
	    calculate_class& kc_current_view=static_cast<calculate_class&>(kc_current_view_base);
#line 83 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
	    if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Mul) && (phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_1)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 83, this);
#line 82 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 82 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_1)->term_1)->integer_1;
#line 82 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression rest = phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_2;
#line 83 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Mul(Term(Number(mul(a, b))), rest);

#line  291 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",83,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 86 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Div) && (phylum_cast<const impl_expression_Div*>(l_expression_2)->expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Div*>(l_expression_2)->expression_1)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 86, this);
#line 85 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 85 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Div*>(l_expression_2)->expression_1)->term_1)->integer_1;
#line 85 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression rest = phylum_cast<const impl_expression_Div*>(l_expression_2)->expression_2;
#line 86 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Div(Term(Number(mul(a, b))), rest);

#line  307 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",86,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 80 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_2)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 80, this);
#line 79 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 79 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_2)->term_1)->integer_1;
#line 80 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Term(Number(mul(a, b)));

#line  321 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",80,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
		    goto kc_rewrite_default;
	}
	case canon_enum: {
	    canon_class& kc_current_view=static_cast<canon_class&>(kc_current_view_base);
#line 130 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
	    if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Ident) && (l_expression_2->prod_sel() == sel_Mul) && (phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_1)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 130, this);
#line 129 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression a = l_expression_1;
#line 129 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression b = phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_1;
#line 129 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression rest = phylum_cast<const impl_expression_Mul*>(l_expression_2)->expression_2;
#line 130 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Mul(b, Mul(a, rest));

#line  341 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",130,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 124 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Ident) && (l_expression_2->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_2)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 124, this);
#line 123 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression a = l_expression_1;
#line 123 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression b = l_expression_2;
#line 124 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Mul(b, a);

#line  355 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",124,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 118 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Mul)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 118, this);
#line 117 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression a = phylum_cast<const impl_expression_Mul*>(l_expression_1)->expression_1;
#line 117 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression b = phylum_cast<const impl_expression_Mul*>(l_expression_1)->expression_2;
#line 117 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression c = l_expression_2;
#line 118 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Mul(a, Mul(b, c));

#line  371 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",118,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
		    goto kc_rewrite_default;
	}
	kc_rewrite_default:
	default:;
    }
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Mul* kc_result= Mul(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Plus::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    switch(kc_current_view_base) {
	case calculate_enum: {
	    calculate_class& kc_current_view=static_cast<calculate_class&>(kc_current_view_base);
#line 65 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
	    if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Plus) && (phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_1)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 65, this);
#line 64 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 64 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_1)->term_1)->integer_1;
#line 64 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression rest = phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_2;
#line 65 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Plus(Term(Number(plus(a, b))), rest);

#line  410 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",65,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 68 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Minus) && (phylum_cast<const impl_expression_Minus*>(l_expression_2)->expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Minus*>(l_expression_2)->expression_1)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 68, this);
#line 67 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 67 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Minus*>(l_expression_2)->expression_1)->term_1)->integer_1;
#line 67 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression rest = phylum_cast<const impl_expression_Minus*>(l_expression_2)->expression_2;
#line 68 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Minus(Term(Number(plus(a, b))), rest);

#line  426 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",68,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 62 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Number) && (l_expression_2->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_2)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 62, this);
#line 61 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer a = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1)->integer_1;
#line 61 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const integer b = phylum_cast<const impl_term_Number*>(phylum_cast<const impl_expression_Term*>(l_expression_2)->term_1)->integer_1;
#line 62 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Term(Number(plus(a, b)));

#line  440 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",62,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
		    goto kc_rewrite_default;
	}
	case canon_enum: {
	    canon_class& kc_current_view=static_cast<canon_class&>(kc_current_view_base);
#line 127 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
	    if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Ident) && (l_expression_2->prod_sel() == sel_Plus) && (phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_1)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 127, this);
#line 126 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression a = l_expression_1;
#line 126 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression b = phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_1;
#line 126 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression rest = phylum_cast<const impl_expression_Plus*>(l_expression_2)->expression_2;
#line 127 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Plus(b, Plus(a, rest));

#line  460 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",127,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 121 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_1)->term_1->prod_sel() == sel_Ident) && (l_expression_2->prod_sel() == sel_Term) && (phylum_cast<const impl_expression_Term*>(l_expression_2)->term_1->prod_sel() == sel_Number)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 121, this);
#line 120 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression a = l_expression_1;
#line 120 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression b = l_expression_2;
#line 121 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Plus(b, a);

#line  474 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",121,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 109 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Plus)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 109, this);
#line 108 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression a = phylum_cast<const impl_expression_Plus*>(l_expression_1)->expression_1;
#line 108 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression b = phylum_cast<const impl_expression_Plus*>(l_expression_1)->expression_2;
#line 108 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression c = l_expression_2;
#line 109 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Plus(a, Plus(b, c));

#line  490 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",109,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
#line 112 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		if ((l_expression_1->prod_sel() == sel_Minus)) { KC_TRACE_REWRITE_MATCH(kc_current_view, "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k", 112, this);
#line 111 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression a = phylum_cast<const impl_expression_Minus*>(l_expression_1)->expression_1;
#line 111 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression b = phylum_cast<const impl_expression_Minus*>(l_expression_1)->expression_2;
#line 111 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		const expression c = l_expression_2;
#line 112 "/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k"
		expression kc_result = Plus(c, Minus(a, b));

#line  506 "testrk.kcc"
		KC_TRACE_REWRITE_RESULT(kc_current_view,"/home/ed/mcsema-testing/llvm-test-suite/MultiSource/Applications/kimwitu++/inputs/f3.k",112,kc_result);
		return (const_cast<const impl_expression*>(kc_result) == this) ? this : kc_result->rewrite( kc_current_view_base );

	    } else
		    goto kc_rewrite_default;
	}
	kc_rewrite_default:
	default:;
    }
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Plus* kc_result= Plus(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Term::rewrite(rview kc_current_view_base)
{
    term l_term_1 =
	term_1->rewrite(kc_current_view_base);
    if ((l_term_1 == term_1))
	return this;
    else {
	impl_expression_Term* kc_result= Term(l_term_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

} // namespace kc
